// This file is generated by rust-protobuf 3.7.2. Do not edit
// .proto file is parsed by protoc --rs_out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `embed_data.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_2;

// @@protoc_insertion_point(message:FloatVecProto)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct FloatVecProto {
    // message fields
    // @@protoc_insertion_point(field:FloatVecProto.value)
    pub value: ::std::vec::Vec<f32>,
    // special fields
    // @@protoc_insertion_point(special_field:FloatVecProto.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a FloatVecProto {
    fn default() -> &'a FloatVecProto {
        <FloatVecProto as ::protobuf::Message>::default_instance()
    }
}

impl FloatVecProto {
    pub fn new() -> FloatVecProto {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "value",
            |m: &FloatVecProto| { &m.value },
            |m: &mut FloatVecProto| { &mut m.value },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<FloatVecProto>(
            "FloatVecProto",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for FloatVecProto {
    const NAME: &'static str = "FloatVecProto";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    is.read_repeated_packed_float_into(&mut self.value)?;
                },
                13 => {
                    self.value.push(is.read_float()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += 5 * self.value.len() as u64;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.value {
            os.write_float(1, *v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> FloatVecProto {
        FloatVecProto::new()
    }

    fn clear(&mut self) {
        self.value.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static FloatVecProto {
        static instance: FloatVecProto = FloatVecProto {
            value: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for FloatVecProto {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("FloatVecProto").unwrap()).clone()
    }
}

impl ::std::fmt::Display for FloatVecProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FloatVecProto {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:MetadataProto)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct MetadataProto {
    // message fields
    // @@protoc_insertion_point(field:MetadataProto.key)
    pub key: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:MetadataProto.value)
    pub value: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:MetadataProto.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MetadataProto {
    fn default() -> &'a MetadataProto {
        <MetadataProto as ::protobuf::Message>::default_instance()
    }
}

impl MetadataProto {
    pub fn new() -> MetadataProto {
        ::std::default::Default::default()
    }

    // optional string key = 1;

    pub fn key(&self) -> &str {
        match self.key.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_key(&mut self) {
        self.key = ::std::option::Option::None;
    }

    pub fn has_key(&self) -> bool {
        self.key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_key(&mut self, v: ::std::string::String) {
        self.key = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key(&mut self) -> &mut ::std::string::String {
        if self.key.is_none() {
            self.key = ::std::option::Option::Some(::std::string::String::new());
        }
        self.key.as_mut().unwrap()
    }

    // Take field
    pub fn take_key(&mut self) -> ::std::string::String {
        self.key.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string value = 2;

    pub fn value(&self) -> &str {
        match self.value.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_value(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_value(&self) -> bool {
        self.value.is_some()
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::string::String) {
        self.value = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::string::String {
        if self.value.is_none() {
            self.value = ::std::option::Option::Some(::std::string::String::new());
        }
        self.value.as_mut().unwrap()
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::string::String {
        self.value.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "key",
            |m: &MetadataProto| { &m.key },
            |m: &mut MetadataProto| { &mut m.key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "value",
            |m: &MetadataProto| { &m.value },
            |m: &mut MetadataProto| { &mut m.value },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MetadataProto>(
            "MetadataProto",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MetadataProto {
    const NAME: &'static str = "MetadataProto";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.key = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.value = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.key.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.value.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.key.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.value.as_ref() {
            os.write_string(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MetadataProto {
        MetadataProto::new()
    }

    fn clear(&mut self) {
        self.key = ::std::option::Option::None;
        self.value = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MetadataProto {
        static instance: MetadataProto = MetadataProto {
            key: ::std::option::Option::None,
            value: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MetadataProto {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MetadataProto").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MetadataProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MetadataProto {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:EmbedDataProto)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct EmbedDataProto {
    // message fields
    // @@protoc_insertion_point(field:EmbedDataProto.text)
    pub text: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:EmbedDataProto.metadata)
    pub metadata: ::std::vec::Vec<MetadataProto>,
    ///  1 => DenseVector
    ///  2+ => MultiVector
    ///  Ref https://github.com/StarlightSearch/EmbedAnything/blob/1a004c6a5dd3cb1e8c1b597088530461b797d6d7/rust/src/embeddings/embed.rs#L29
    // @@protoc_insertion_point(field:EmbedDataProto.result)
    pub result: ::std::vec::Vec<FloatVecProto>,
    // special fields
    // @@protoc_insertion_point(special_field:EmbedDataProto.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a EmbedDataProto {
    fn default() -> &'a EmbedDataProto {
        <EmbedDataProto as ::protobuf::Message>::default_instance()
    }
}

impl EmbedDataProto {
    pub fn new() -> EmbedDataProto {
        ::std::default::Default::default()
    }

    // optional string text = 1;

    pub fn text(&self) -> &str {
        match self.text.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_text(&mut self) {
        self.text = ::std::option::Option::None;
    }

    pub fn has_text(&self) -> bool {
        self.text.is_some()
    }

    // Param is passed by value, moved
    pub fn set_text(&mut self, v: ::std::string::String) {
        self.text = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_text(&mut self) -> &mut ::std::string::String {
        if self.text.is_none() {
            self.text = ::std::option::Option::Some(::std::string::String::new());
        }
        self.text.as_mut().unwrap()
    }

    // Take field
    pub fn take_text(&mut self) -> ::std::string::String {
        self.text.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "text",
            |m: &EmbedDataProto| { &m.text },
            |m: &mut EmbedDataProto| { &mut m.text },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "metadata",
            |m: &EmbedDataProto| { &m.metadata },
            |m: &mut EmbedDataProto| { &mut m.metadata },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "result",
            |m: &EmbedDataProto| { &m.result },
            |m: &mut EmbedDataProto| { &mut m.result },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EmbedDataProto>(
            "EmbedDataProto",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for EmbedDataProto {
    const NAME: &'static str = "EmbedDataProto";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.text = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.metadata.push(is.read_message()?);
                },
                26 => {
                    self.result.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.text.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        for value in &self.metadata {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.result {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.text.as_ref() {
            os.write_string(1, v)?;
        }
        for v in &self.metadata {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        for v in &self.result {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> EmbedDataProto {
        EmbedDataProto::new()
    }

    fn clear(&mut self) {
        self.text = ::std::option::Option::None;
        self.metadata.clear();
        self.result.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static EmbedDataProto {
        static instance: EmbedDataProto = EmbedDataProto {
            text: ::std::option::Option::None,
            metadata: ::std::vec::Vec::new(),
            result: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for EmbedDataProto {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("EmbedDataProto").unwrap()).clone()
    }
}

impl ::std::fmt::Display for EmbedDataProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EmbedDataProto {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x10embed_data.proto\"%\n\rFloatVecProto\x12\x14\n\x05value\x18\x01\
    \x20\x03(\x02R\x05value\"7\n\rMetadataProto\x12\x10\n\x03key\x18\x01\x20\
    \x01(\tR\x03key\x12\x14\n\x05value\x18\x02\x20\x01(\tR\x05value\"x\n\x0e\
    EmbedDataProto\x12\x12\n\x04text\x18\x01\x20\x01(\tR\x04text\x12*\n\x08m\
    etadata\x18\x02\x20\x03(\x0b2\x0e.MetadataProtoR\x08metadata\x12&\n\x06r\
    esult\x18\x03\x20\x03(\x0b2\x0e.FloatVecProtoR\x06resultJ\xa6\x05\n\x06\
    \x12\x04\0\0\x13\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\n\n\x02\x04\0\x12\
    \x04\x02\0\x04\x01\n\n\n\x03\x04\0\x01\x12\x03\x02\x08\x15\n\x0b\n\x04\
    \x04\0\x02\0\x12\x03\x03\x04\x1d\n\x0c\n\x05\x04\0\x02\0\x04\x12\x03\x03\
    \x04\x0c\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x03\r\x12\n\x0c\n\x05\x04\0\
    \x02\0\x01\x12\x03\x03\x13\x18\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x03\
    \x1b\x1c\n\n\n\x02\x04\x01\x12\x04\x06\0\t\x01\n\n\n\x03\x04\x01\x01\x12\
    \x03\x06\x08\x15\n\x0b\n\x04\x04\x01\x02\0\x12\x03\x07\x04\x1c\n\x0c\n\
    \x05\x04\x01\x02\0\x04\x12\x03\x07\x04\x0c\n\x0c\n\x05\x04\x01\x02\0\x05\
    \x12\x03\x07\r\x13\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x07\x14\x17\n\
    \x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x07\x1a\x1b\n\x0b\n\x04\x04\x01\x02\
    \x01\x12\x03\x08\x04\x1e\n\x0c\n\x05\x04\x01\x02\x01\x04\x12\x03\x08\x04\
    \x0c\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03\x08\r\x13\n\x0c\n\x05\x04\
    \x01\x02\x01\x01\x12\x03\x08\x14\x19\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\
    \x03\x08\x1c\x1d\n\n\n\x02\x04\x02\x12\x04\x0b\0\x13\x01\n\n\n\x03\x04\
    \x02\x01\x12\x03\x0b\x08\x16\n\x0b\n\x04\x04\x02\x02\0\x12\x03\x0c\x04\
    \x1d\n\x0c\n\x05\x04\x02\x02\0\x04\x12\x03\x0c\x04\x0c\n\x0c\n\x05\x04\
    \x02\x02\0\x05\x12\x03\x0c\r\x13\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03\
    \x0c\x14\x18\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03\x0c\x1b\x1c\n\x0b\n\
    \x04\x04\x02\x02\x01\x12\x03\r\x04(\n\x0c\n\x05\x04\x02\x02\x01\x04\x12\
    \x03\r\x04\x0c\n\x0c\n\x05\x04\x02\x02\x01\x06\x12\x03\r\r\x1a\n\x0c\n\
    \x05\x04\x02\x02\x01\x01\x12\x03\r\x1b#\n\x0c\n\x05\x04\x02\x02\x01\x03\
    \x12\x03\r&'\n\xb8\x01\n\x04\x04\x02\x02\x02\x12\x03\x12\x04&\x1a\xaa\
    \x01\x201\x20=>\x20DenseVector\n\x202+\x20=>\x20MultiVector\n\x20Ref\x20\
    https://github.com/StarlightSearch/EmbedAnything/blob/1a004c6a5dd3cb1e8c\
    1b597088530461b797d6d7/rust/src/embeddings/embed.rs#L29\n\n\x0c\n\x05\
    \x04\x02\x02\x02\x04\x12\x03\x12\x04\x0c\n\x0c\n\x05\x04\x02\x02\x02\x06\
    \x12\x03\x12\r\x1a\n\x0c\n\x05\x04\x02\x02\x02\x01\x12\x03\x12\x1b!\n\
    \x0c\n\x05\x04\x02\x02\x02\x03\x12\x03\x12$%\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(3);
            messages.push(FloatVecProto::generated_message_descriptor_data());
            messages.push(MetadataProto::generated_message_descriptor_data());
            messages.push(EmbedDataProto::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
